/**
 * Game Configuration - Single Source of Truth for Balance Values
 *
 * AAA 2026 Standard: All game balance values centralized here.
 * Hook 10 (enforce-config-constants) prevents hard-coding these values elsewhere.
 *
 * Benefits:
 * - Tune balance without code changes
 * - A/B test different values
 * - Hot-fix in production
 * - Clear audit trail
 */

export const GAME_CONFIG = {
  /**
   * Economy - DNA costs and rewards
   */
  economy: {
    dna: {
      // Earning rates
      scoreMultiplier: 0.1,        // DNA per score point
      completionBonus: 10,          // Bonus for completing level
      firstWinBonus: 50,            // First win of the day

      // Costs
      breedingCost: 50,             // DNA to breed two variants
      evolutionCost: 100,           // DNA to evolve variant
      unlockSlotCost: 25,           // DNA to unlock collection slot
    },

    // Future: Other currencies
    gems: {
      // purchaseRate: 100,         // Gems per $1
    }
  },

  /**
   * Energy System - Session gating
   */
  energy: {
    maxEnergy: 5,                   // Maximum energy capacity
    energyCostPerGame: 1,           // Energy consumed per game
    regenRateMinutes: 20,           // Minutes to regenerate 1 energy
    regenRateMs: 20 * 60 * 1000,    // Milliseconds (for code)
  },

  /**
   * Spawning - Game object spawn rates
   */
  spawning: {
    foodSpawnRate: 0.3,             // Probability per tick
    powerupSpawnRate: 0.1,          // Probability per tick
    maxFoodOnScreen: 5,             // Cap for performance
    maxPowerupsOnScreen: 2,
  },

  /**
   * Breeding - Variant creation
   */
  breeding: {
    baseCost: 50,                   // DNA cost for same-dynasty breeding
    crossDynastyCost: 100,          // DNA cost for cross-dynasty (future)
    cooldownMinutes: 0,             // Cooldown between breeds (0 = none for MVP)
    maxBreedingPairsActive: 3,      // Concurrent breeding limit (future)
  },

  /**
   * Evolution - Rarity transformation
   */
  evolution: {
    commonToUncommon: 100,          // DNA cost
    uncommonToRare: 250,
    rareToEpic: 500,
    epicToLegendary: 1000,
  },

  /**
   * Collection - Panini book targets
   */
  collection: {
    slotsPerDynasty: 10,            // Collection slots per dynasty
    setCompletionBonus: 100,        // DNA for completing full set
    dynastyCompletionBonus: 500,    // DNA for completing entire dynasty
  },

  /**
   * Classic Mode - Snake gameplay
   */
  classicMode: {
    gridSize: 20,                   // 20x20 grid
    initialSpeed: 150,              // Milliseconds per move
    speedIncrease: 5,               // Speed up per food eaten
    minSpeed: 50,                   // Maximum speed cap
    victoryScore: 100,              // Score needed to win
  },

  /**
   * Progression - Level requirements
   */
  progression: {
    level2Requirement: 100,         // DNA needed for level 2
    level3Requirement: 250,
    level4Requirement: 500,
    level5Requirement: 1000,
  },

  /**
   * Feature Flags - Enable/disable features
   */
  features: {
    breeding: true,
    evolution: false,               // v0.5+
    multiplayer: false,             // v1.0+
    leaderboards: false,            // v1.0+
    guildSystem: false,             // Future
  },

  /**
   * Limits - Anti-abuse measures
   */
  limits: {
    maxGamesPerDay: 1000,           // Reasonable limit
    maxDNAPerGame: 1000,            // Cap for suspicious activity
    maxCollectionSize: 100,         // Total variants per player
  }
} as const;

/**
 * Type exports for TypeScript
 */
export type GameConfig = typeof GAME_CONFIG;
export type EconomyConfig = typeof GAME_CONFIG.economy;
export type EnergyConfig = typeof GAME_CONFIG.energy;

/**
 * Helper functions for dynamic config
 */
export const getBreedingCost = (dynasty1: string, dynasty2: string): number => {
  if (dynasty1 === dynasty2) {
    return GAME_CONFIG.breeding.baseCost;
  }
  return GAME_CONFIG.breeding.crossDynastyCost;
};

export const getEvolutionCost = (fromRarity: string, toRarity: string): number => {
  const key = `${fromRarity}To${toRarity.charAt(0).toUpperCase()}${toRarity.slice(1)}` as keyof typeof GAME_CONFIG.evolution;
  return GAME_CONFIG.evolution[key] || 0;
};

/**
 * Usage Examples:
 *
 * import { GAME_CONFIG } from '@/shared/config/game';
 *
 * const cost = GAME_CONFIG.economy.dna.breedingCost;
 * const energyMax = GAME_CONFIG.energy.maxEnergy;
 * const gridSize = GAME_CONFIG.classicMode.gridSize;
 */
